{"version":3,"sources":["store/index.ts","api/api.ts","components/CurrentUser/CurrentUser.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["GET_TODOS","DELETE_TODO","GET_USER","SELECT_USER","GET_ERROR","actions","todos","type","id","user","userId","messageError","selectors","state","initialState","store","createStore","action","filter","todo","composeWithDevTools","API_URL","getTodos","a","fetch","response","json","getUser","CurrentUser","useSelector","error","dispatch","useDispatch","gottenUser","useEffect","resetUserId","useCallback","className","name","email","phone","onClick","TodoList","Status","selectedUserId","useState","query","setQuery","status","setStatus","visibleTodos","setVisibleTodos","deleteTodoById","handleUserId","filteredTodos","selectedTodo","conditionOfSelect","title","toLowerCase","includes","trim","ALL","COMPLITED","completed","ACTIVE","handlerFilter","length","value","onChange","event","target","map","classNames","readOnly","checked","Number","App","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.39bc0760.chunk.js","sourcesContent":["import { AnyAction, createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { Todo } from '../types/TodoType';\nimport { User } from '../types/UserType';\n\nconst GET_TODOS = 'GET_TODOS';\nconst DELETE_TODO = 'DELETE_TODO';\nconst GET_USER = 'GET_USER';\nconst SELECT_USER = 'SELECT_USER';\nconst GET_ERROR = 'GET_ERROR';\n\nexport const actions = {\n  getTodos: (todos: Todo[]) => ({\n    type: GET_TODOS,\n    todos,\n  }),\n  deleteTodo: (id: number) => ({\n    type: DELETE_TODO,\n    id,\n  }),\n  getUser: (user: User) => ({\n    type: GET_USER,\n    user,\n  }),\n  selectUser: (userId: number) => ({\n    type: SELECT_USER,\n    userId,\n  }),\n  getError: (messageError: string) => ({\n    type: GET_ERROR,\n    messageError,\n  }),\n};\n\nexport const selectors = {\n  loadTodos: (state: RootState) => state.todos,\n  loadUser: (state: RootState) => state.user,\n  getUserId: (state: RootState) => state.userId,\n  getMessageError: (state: RootState) => state.messageError,\n};\n\nexport type RootState = {\n  todos: Todo[],\n  user: User | null,\n  userId: number,\n  messageError: string,\n};\n\nconst initialState: RootState = {\n  todos: [],\n  user: null,\n  userId: 0,\n  messageError: '',\n};\n\nconst rootReducer = (\n  state = initialState,\n  action: AnyAction,\n) => {\n  switch (action.type) {\n    case GET_TODOS:\n      return { ...state, todos: action.todos };\n\n    case DELETE_TODO:\n      return {\n        ...state,\n        todos: state.todos.filter((todo) => todo.id !== action.id),\n      };\n\n    case GET_USER:\n      return { ...state, user: action.user };\n\n    case SELECT_USER:\n      return { ...state, userId: action.userId };\n\n    case GET_ERROR:\n      return { ...state, messageError: action.messageError };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","import { Todo } from '../types/TodoType';\nimport { User } from '../types/UserType';\n\nconst API_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n}\n","import React, { useCallback, useEffect } from 'react';\nimport './CurrentUser.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api/api';\nimport { actions, selectors } from '../../store';\n\nexport const CurrentUser: React.FC = () => {\n  const userId = useSelector(selectors.getUserId);\n  const error = useSelector(selectors.getMessageError);\n  const user = useSelector(selectors.loadUser);\n  const dispatch = useDispatch();\n\n  async function response() {\n    try {\n      const gottenUser = await getUser(userId);\n\n      dispatch(actions.getUser(gottenUser));\n    } catch {\n      dispatch(actions.getError(`Can not load the user.\n        Please reload the page.`));\n    }\n  }\n\n  useEffect(() => {\n    response();\n  }, [userId]);\n\n  const resetUserId = useCallback(() => {\n    dispatch(actions.selectUser(0));\n  }, []);\n\n  return (\n    <>\n      {user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:&nbsp;\n              {user.id}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\" data-cy=\"userName\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n          <button\n            type=\"button\"\n            onClick={() => resetUserId()}\n            className=\"CurrentUser__clear\"\n          >\n            Clear\n          </button>\n        </div>\n      ) : (<p>{error}</p>)}\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Todo } from '../../types/TodoType';\nimport { actions, selectors } from '../../store';\n\nexport const TodoList: React.FC = () => {\n  const todos = useSelector(selectors.loadTodos);\n  const selectedUserId = useSelector(selectors.getUserId);\n\n  const [query, setQuery] = useState('');\n  const [status, setStatus] = useState('all');\n  const [visibleTodos, setVisibleTodos] = useState<Todo[]>(todos);\n\n  const dispatch = useDispatch();\n\n  enum Status {\n    ALL = 'all',\n    COMPLITED = 'completed',\n    ACTIVE = 'active',\n  }\n\n  const handlerFilter = () => {\n    const filteredTodos = todos.filter((selectedTodo) => {\n      const conditionOfSelect = selectedTodo.title\n        .toLowerCase().includes(query.trim().toLowerCase());\n\n      if (query.trim() !== '' && status === Status.ALL) {\n        return conditionOfSelect;\n      }\n\n      if (status === Status.COMPLITED) {\n        return conditionOfSelect && selectedTodo.completed;\n      }\n\n      if (status === Status.ACTIVE) {\n        return conditionOfSelect && !selectedTodo.completed;\n      }\n\n      return true;\n    });\n\n    setVisibleTodos(filteredTodos);\n  };\n\n  const deleteTodoById = useCallback((id: number) => {\n    dispatch(actions.deleteTodo(id));\n  }, []);\n\n  const handleUserId = useCallback((userId: number) => {\n    dispatch(actions.selectUser(userId));\n  }, []);\n\n  useEffect(() => {\n    setVisibleTodos(todos);\n    handlerFilter();\n  }, [todos, query, status]);\n\n  return (\n    <div className=\"TodoList\">\n      <h2>\n        Todos:&nbsp;\n        {visibleTodos.length}\n        &nbsp;from&nbsp;\n        {todos.length}\n      </h2>\n      <div className=\"TodoList__inputs-group\">\n        <div className=\"TodoList__inputs\">\n          <input\n            className=\"TodoList__input\"\n            data-cy=\"filterByTitle\"\n            type=\"text\"\n            name=\"title\"\n            value={query}\n            onChange={(event) => {\n              setQuery(event.target.value);\n            }}\n          />\n          <p className=\"TodoList__input-name\">\n            Search a case\n          </p>\n        </div>\n        <div className=\"TodoList__inputs\">\n          <select\n            className=\"TodoList__input\n            TodoList__input--select\"\n            name=\"status\"\n            value={status}\n            onChange={(event) => {\n              setStatus(event.target.value);\n            }}\n          >\n            <option value={Status.ALL}>\n              Demonstrate all\n            </option>\n            <option value={Status.ACTIVE}>\n              Demonstrate active\n            </option>\n            <option value={Status.COMPLITED}>\n              Demonstrate completed\n            </option>\n          </select>\n          <p className=\"TodoList__input-name\">\n            Select status\n          </p>\n        </div>\n      </div>\n      <div className=\"TodoList__list-container\">\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {visibleTodos.map((todo) => (\n            <li\n              className={classNames(\n                'TodoList__item',\n                {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                },\n              )}\n              key={todo.id}\n            >\n              <label>\n                <input\n                  type=\"checkbox\"\n                  readOnly\n                  checked={todo.completed}\n                />\n                <p>\n                  {todo.title}\n                </p>\n              </label>\n\n              {todo.userId && (\n                <div className=\"TodoList__buttons\">\n                  <button\n                    type=\"button\"\n                    data-cy=\"userButton\"\n                    onClick={() => handleUserId(Number(todo.userId))}\n                    className={classNames(\n                      'TodoList__user-button',\n                      'button',\n                      {\n                        'TodoList__user-button--selected':\n                          selectedUserId === Number(todo.userId),\n                      },\n                    )}\n                  >\n                    User&nbsp;#\n                    {todo.userId}\n                  </button>\n\n                  <button\n                    type=\"button\"\n                    onClick={() => deleteTodoById(Number(todo.id))}\n                    className={classNames(\n                      'TodoList__todo-button',\n                      {\n                        'TodoList__todo-button--selected':\n                          selectedUserId === Number(todo.userId),\n                      },\n                    )}\n                  >\n                    DELETE\n                  </button>\n                </div>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos } from './api/api';\nimport './App.scss';\nimport { CurrentUser } from './components/CurrentUser';\nimport { TodoList } from './components/TodoList';\nimport { actions, selectors } from './store';\nimport './styles/general.scss';\n\nconst App = () => {\n  const selectedUserId = useSelector(selectors.getUserId);\n  const messageError = useSelector(selectors.getMessageError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(actions.getTodos(todosFromServer));\n      } catch {\n        dispatch(actions.getError('Can not load todos'));\n      }\n    }\n\n    response();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Redux list of todos</h1>\n      {messageError.length === 0 ? (\n        <div className=\"App__main\">\n          <div className=\"App__sidebar\">\n            <TodoList />\n          </div>\n\n          <div className=\"App__content\">\n            <div className=\"App__content-container\">\n              {selectedUserId ? (\n                <CurrentUser />\n              ) : 'No user selected'}\n            </div>\n          </div>\n        </div>\n      ) : (<p className=\"App__error\">{messageError}</p>)}\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}